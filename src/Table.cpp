#include "Table.hpp"

#include <cmath>

// Session method implementation
std::chrono::seconds Session::totalTime() const {
  return end_time - start_time;
}

// Table constructor
Table::Table(const int id, const int price_per_hour)
    : id_(id), price_per_hour_(price_per_hour) {}

// Start a new session
void Table::startSession(const std::string& client_name,
                         const std::chrono::seconds& start_time) {
  current_session_ = Session{client_name, start_time, {}};
}

// End the current session
void Table::endSession(const std::chrono::seconds& end_time) {
  if (!current_session_) {
    return;
  }

  current_session_->end_time = end_time;
  sessions_.push_back(*current_session_);
  current_session_.reset();
}

// Transfer session from another table
void Table::transferSession(Table& old_table) {
  if (current_session_) {
    return;
  }

  current_session_ = old_table.current_session_;
  old_table.current_session_.reset();
}

// Check if the table is occupied
bool Table::isOccupied() const { return current_session_.has_value(); }

// Calculate total time the table was occupied
std::chrono::seconds Table::totalTime() const {
  std::chrono::seconds total{0};
  for (const auto& session : sessions_) {
    total += session.totalTime();
  }
  return total;
}

// Calculate total revenue generated by the table
int Table::totalRevenue() const {
  double total_time = 0;

  for (const auto& session : sessions_) {
    total_time +=
        std::ceil(static_cast<double>(session.totalTime().count()) / 3600.0);
  }

  return static_cast<int>(total_time) * price_per_hour_;
}

int Table::id() const { return id_; }